name: Java CI with Gradle

# on:
#   push:
#     branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # jdk 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew 파일 설정 
      - name: permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build  
      - name: Spring Boot Build
        run : ./gradlew clean build --exclude-task test

      # AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

        # AWS ECR Login 
      - name: aws ecr login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 이미지 Build 
      - name: docker image build
        run: docker build -t spring-boot .

      # 도커 이미지에 태그 지정 
      - name: docker tag
        run: docker tag spring-boot ${{secrets.ECR_URI}}

      # AWS ECR push  
      - name: AWS ECR push
        run: docker push ${{secrets.ECR_URI}}

      # GET GitHub IP 
      - name: get GitHub IP 
        id: ip
        uses: haythem/public-ip@v1.2
      
      #  Add github ip to AWS 
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
      # AWS EC2 Server Connect & Docker 명령어 실행 
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }} 
          password: ${{ secrets.EC2_PASSWORD }} 
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            sudo docker rmi -f ${{secrets.ECR_URI}}
            aws ecr get-login-password --profile ${{ secrets.IAM_NAME }} --region ap-northeast-2 | docker login --username AWS --password-stdin ${{secrets.ECR_URI}}
            docker stop spring-boot
            docker rm spring-boot
            docker stop redis
            doker rm redis
            docker pull ${{secrets.ECR_URI}}
            dokcer-compose up -d 
      
      # REMOVE Github IP FROM security group 
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
